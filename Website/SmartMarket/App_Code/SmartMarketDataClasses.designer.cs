#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C363519_SmartMarket")]
public partial class SmartMarketDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertApp(App instance);
  partial void UpdateApp(App instance);
  partial void DeleteApp(App instance);
  partial void InsertAppType(AppType instance);
  partial void UpdateAppType(AppType instance);
  partial void DeleteAppType(AppType instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertDeveloper(Developer instance);
  partial void UpdateDeveloper(Developer instance);
  partial void DeleteDeveloper(Developer instance);
  partial void InsertRecommendation(Recommendation instance);
  partial void UpdateRecommendation(Recommendation instance);
  partial void DeleteRecommendation(Recommendation instance);
  partial void InsertScreenshot(Screenshot instance);
  partial void UpdateScreenshot(Screenshot instance);
  partial void DeleteScreenshot(Screenshot instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertUserApp(UserApp instance);
  partial void UpdateUserApp(UserApp instance);
  partial void DeleteUserApp(UserApp instance);
  partial void InsertUserFeature(UserFeature instance);
  partial void UpdateUserFeature(UserFeature instance);
  partial void DeleteUserFeature(UserFeature instance);
  partial void InsertVersion(Version instance);
  partial void UpdateVersion(Version instance);
  partial void DeleteVersion(Version instance);
  #endregion
	
	public SmartMarketDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["C363519_SmartMarketConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public SmartMarketDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SmartMarketDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SmartMarketDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SmartMarketDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<App> Apps
	{
		get
		{
			return this.GetTable<App>();
		}
	}
	
	public System.Data.Linq.Table<AppType> AppTypes
	{
		get
		{
			return this.GetTable<AppType>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<Developer> Developers
	{
		get
		{
			return this.GetTable<Developer>();
		}
	}
	
	public System.Data.Linq.Table<Recommendation> Recommendations
	{
		get
		{
			return this.GetTable<Recommendation>();
		}
	}
	
	public System.Data.Linq.Table<Screenshot> Screenshots
	{
		get
		{
			return this.GetTable<Screenshot>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<UserApp> UserApps
	{
		get
		{
			return this.GetTable<UserApp>();
		}
	}
	
	public System.Data.Linq.Table<UserFeature> UserFeatures
	{
		get
		{
			return this.GetTable<UserFeature>();
		}
	}
	
	public System.Data.Linq.Table<Version> Versions
	{
		get
		{
			return this.GetTable<Version>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.App")]
public partial class App : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _appID;
	
	private int _categoryID;
	
	private int _developerID;
	
	private string _name;
	
	private string _packageName;
	
	private int _installs;
	
	private string _description;
	
	private string _whatIsNew;
	
	private float _rate;
	
	private int _ratesCount;
	
	private System.Nullable<int> _activatedVersionID;
	
	private bool _published;
	
	private EntitySet<Recommendation> _Recommendations;
	
	private EntitySet<Screenshot> _Screenshots;
	
	private EntitySet<UserApp> _UserApps;
	
	private EntitySet<Version> _Versions;
	
	private EntityRef<Category> _Category;
	
	private EntityRef<Developer> _Developer;
	
	private EntityRef<Version> _Version;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnappIDChanging(int value);
    partial void OnappIDChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OndeveloperIDChanging(int value);
    partial void OndeveloperIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpackageNameChanging(string value);
    partial void OnpackageNameChanged();
    partial void OninstallsChanging(int value);
    partial void OninstallsChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnwhatIsNewChanging(string value);
    partial void OnwhatIsNewChanged();
    partial void OnrateChanging(float value);
    partial void OnrateChanged();
    partial void OnratesCountChanging(int value);
    partial void OnratesCountChanged();
    partial void OnactivatedVersionIDChanging(System.Nullable<int> value);
    partial void OnactivatedVersionIDChanged();
    partial void OnpublishedChanging(bool value);
    partial void OnpublishedChanged();
    #endregion
	
	public App()
	{
		this._Recommendations = new EntitySet<Recommendation>(new Action<Recommendation>(this.attach_Recommendations), new Action<Recommendation>(this.detach_Recommendations));
		this._Screenshots = new EntitySet<Screenshot>(new Action<Screenshot>(this.attach_Screenshots), new Action<Screenshot>(this.detach_Screenshots));
		this._UserApps = new EntitySet<UserApp>(new Action<UserApp>(this.attach_UserApps), new Action<UserApp>(this.detach_UserApps));
		this._Versions = new EntitySet<Version>(new Action<Version>(this.attach_Versions), new Action<Version>(this.detach_Versions));
		this._Category = default(EntityRef<Category>);
		this._Developer = default(EntityRef<Developer>);
		this._Version = default(EntityRef<Version>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int appID
	{
		get
		{
			return this._appID;
		}
		set
		{
			if ((this._appID != value))
			{
				this.OnappIDChanging(value);
				this.SendPropertyChanging();
				this._appID = value;
				this.SendPropertyChanged("appID");
				this.OnappIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
	public int categoryID
	{
		get
		{
			return this._categoryID;
		}
		set
		{
			if ((this._categoryID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncategoryIDChanging(value);
				this.SendPropertyChanging();
				this._categoryID = value;
				this.SendPropertyChanged("categoryID");
				this.OncategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_developerID", DbType="Int NOT NULL")]
	public int developerID
	{
		get
		{
			return this._developerID;
		}
		set
		{
			if ((this._developerID != value))
			{
				if (this._Developer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OndeveloperIDChanging(value);
				this.SendPropertyChanging();
				this._developerID = value;
				this.SendPropertyChanged("developerID");
				this.OndeveloperIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_packageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string packageName
	{
		get
		{
			return this._packageName;
		}
		set
		{
			if ((this._packageName != value))
			{
				this.OnpackageNameChanging(value);
				this.SendPropertyChanging();
				this._packageName = value;
				this.SendPropertyChanged("packageName");
				this.OnpackageNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_installs", DbType="Int NOT NULL")]
	public int installs
	{
		get
		{
			return this._installs;
		}
		set
		{
			if ((this._installs != value))
			{
				this.OninstallsChanging(value);
				this.SendPropertyChanging();
				this._installs = value;
				this.SendPropertyChanged("installs");
				this.OninstallsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_whatIsNew", DbType="VarChar(500)")]
	public string whatIsNew
	{
		get
		{
			return this._whatIsNew;
		}
		set
		{
			if ((this._whatIsNew != value))
			{
				this.OnwhatIsNewChanging(value);
				this.SendPropertyChanging();
				this._whatIsNew = value;
				this.SendPropertyChanged("whatIsNew");
				this.OnwhatIsNewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Real NOT NULL")]
	public float rate
	{
		get
		{
			return this._rate;
		}
		set
		{
			if ((this._rate != value))
			{
				this.OnrateChanging(value);
				this.SendPropertyChanging();
				this._rate = value;
				this.SendPropertyChanged("rate");
				this.OnrateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratesCount", DbType="Int NOT NULL")]
	public int ratesCount
	{
		get
		{
			return this._ratesCount;
		}
		set
		{
			if ((this._ratesCount != value))
			{
				this.OnratesCountChanging(value);
				this.SendPropertyChanging();
				this._ratesCount = value;
				this.SendPropertyChanged("ratesCount");
				this.OnratesCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activatedVersionID", DbType="Int")]
	public System.Nullable<int> activatedVersionID
	{
		get
		{
			return this._activatedVersionID;
		}
		set
		{
			if ((this._activatedVersionID != value))
			{
				if (this._Version.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnactivatedVersionIDChanging(value);
				this.SendPropertyChanging();
				this._activatedVersionID = value;
				this.SendPropertyChanged("activatedVersionID");
				this.OnactivatedVersionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_published", DbType="Bit NOT NULL")]
	public bool published
	{
		get
		{
			return this._published;
		}
		set
		{
			if ((this._published != value))
			{
				this.OnpublishedChanging(value);
				this.SendPropertyChanging();
				this._published = value;
				this.SendPropertyChanged("published");
				this.OnpublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Recommendation", Storage="_Recommendations", ThisKey="appID", OtherKey="appID")]
	public EntitySet<Recommendation> Recommendations
	{
		get
		{
			return this._Recommendations;
		}
		set
		{
			this._Recommendations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Screenshot", Storage="_Screenshots", ThisKey="appID", OtherKey="appID")]
	public EntitySet<Screenshot> Screenshots
	{
		get
		{
			return this._Screenshots;
		}
		set
		{
			this._Screenshots.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_UserApp", Storage="_UserApps", ThisKey="appID", OtherKey="appID")]
	public EntitySet<UserApp> UserApps
	{
		get
		{
			return this._UserApps;
		}
		set
		{
			this._UserApps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Version", Storage="_Versions", ThisKey="appID", OtherKey="appID")]
	public EntitySet<Version> Versions
	{
		get
		{
			return this._Versions;
		}
		set
		{
			this._Versions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_App", Storage="_Category", ThisKey="categoryID", OtherKey="categoryID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Apps.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Apps.Add(this);
					this._categoryID = value.categoryID;
				}
				else
				{
					this._categoryID = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Developer_App", Storage="_Developer", ThisKey="developerID", OtherKey="developerID", IsForeignKey=true)]
	public Developer Developer
	{
		get
		{
			return this._Developer.Entity;
		}
		set
		{
			Developer previousValue = this._Developer.Entity;
			if (((previousValue != value) 
						|| (this._Developer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Developer.Entity = null;
					previousValue.Apps.Remove(this);
				}
				this._Developer.Entity = value;
				if ((value != null))
				{
					value.Apps.Add(this);
					this._developerID = value.developerID;
				}
				else
				{
					this._developerID = default(int);
				}
				this.SendPropertyChanged("Developer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_App", Storage="_Version", ThisKey="activatedVersionID", OtherKey="versionID", IsForeignKey=true)]
	public Version Version
	{
		get
		{
			return this._Version.Entity;
		}
		set
		{
			Version previousValue = this._Version.Entity;
			if (((previousValue != value) 
						|| (this._Version.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Version.Entity = null;
					previousValue.Apps.Remove(this);
				}
				this._Version.Entity = value;
				if ((value != null))
				{
					value.Apps.Add(this);
					this._activatedVersionID = value.versionID;
				}
				else
				{
					this._activatedVersionID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Version");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Recommendations(Recommendation entity)
	{
		this.SendPropertyChanging();
		entity.App = this;
	}
	
	private void detach_Recommendations(Recommendation entity)
	{
		this.SendPropertyChanging();
		entity.App = null;
	}
	
	private void attach_Screenshots(Screenshot entity)
	{
		this.SendPropertyChanging();
		entity.App = this;
	}
	
	private void detach_Screenshots(Screenshot entity)
	{
		this.SendPropertyChanging();
		entity.App = null;
	}
	
	private void attach_UserApps(UserApp entity)
	{
		this.SendPropertyChanging();
		entity.App = this;
	}
	
	private void detach_UserApps(UserApp entity)
	{
		this.SendPropertyChanging();
		entity.App = null;
	}
	
	private void attach_Versions(Version entity)
	{
		this.SendPropertyChanging();
		entity.App = this;
	}
	
	private void detach_Versions(Version entity)
	{
		this.SendPropertyChanging();
		entity.App = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.AppType")]
public partial class AppType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _appTypeID;
	
	private string _name;
	
	private EntitySet<Category> _Categories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnappTypeIDChanging(int value);
    partial void OnappTypeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public AppType()
	{
		this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int appTypeID
	{
		get
		{
			return this._appTypeID;
		}
		set
		{
			if ((this._appTypeID != value))
			{
				this.OnappTypeIDChanging(value);
				this.SendPropertyChanging();
				this._appTypeID = value;
				this.SendPropertyChanged("appTypeID");
				this.OnappTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppType_Category", Storage="_Categories", ThisKey="appTypeID", OtherKey="appTypeID")]
	public EntitySet<Category> Categories
	{
		get
		{
			return this._Categories;
		}
		set
		{
			this._Categories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.AppType = this;
	}
	
	private void detach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.AppType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _categoryID;
	
	private int _appTypeID;
	
	private string _name;
	
	private EntitySet<App> _Apps;
	
	private EntityRef<AppType> _AppType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OnappTypeIDChanging(int value);
    partial void OnappTypeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Category()
	{
		this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
		this._AppType = default(EntityRef<AppType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int categoryID
	{
		get
		{
			return this._categoryID;
		}
		set
		{
			if ((this._categoryID != value))
			{
				this.OncategoryIDChanging(value);
				this.SendPropertyChanging();
				this._categoryID = value;
				this.SendPropertyChanged("categoryID");
				this.OncategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appTypeID", DbType="Int NOT NULL")]
	public int appTypeID
	{
		get
		{
			return this._appTypeID;
		}
		set
		{
			if ((this._appTypeID != value))
			{
				if (this._AppType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnappTypeIDChanging(value);
				this.SendPropertyChanging();
				this._appTypeID = value;
				this.SendPropertyChanged("appTypeID");
				this.OnappTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_App", Storage="_Apps", ThisKey="categoryID", OtherKey="categoryID")]
	public EntitySet<App> Apps
	{
		get
		{
			return this._Apps;
		}
		set
		{
			this._Apps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppType_Category", Storage="_AppType", ThisKey="appTypeID", OtherKey="appTypeID", IsForeignKey=true)]
	public AppType AppType
	{
		get
		{
			return this._AppType.Entity;
		}
		set
		{
			AppType previousValue = this._AppType.Entity;
			if (((previousValue != value) 
						|| (this._AppType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AppType.Entity = null;
					previousValue.Categories.Remove(this);
				}
				this._AppType.Entity = value;
				if ((value != null))
				{
					value.Categories.Add(this);
					this._appTypeID = value.appTypeID;
				}
				else
				{
					this._appTypeID = default(int);
				}
				this.SendPropertyChanged("AppType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Country")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _countryID;
	
	private string _abbreviation;
	
	private string _name;
	
	private string _code;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    partial void OnabbreviationChanging(string value);
    partial void OnabbreviationChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
	
	public Country()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int countryID
	{
		get
		{
			return this._countryID;
		}
		set
		{
			if ((this._countryID != value))
			{
				this.OncountryIDChanging(value);
				this.SendPropertyChanging();
				this._countryID = value;
				this.SendPropertyChanged("countryID");
				this.OncountryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbreviation", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string abbreviation
	{
		get
		{
			return this._abbreviation;
		}
		set
		{
			if ((this._abbreviation != value))
			{
				this.OnabbreviationChanging(value);
				this.SendPropertyChanging();
				this._abbreviation = value;
				this.SendPropertyChanged("abbreviation");
				this.OnabbreviationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string code
	{
		get
		{
			return this._code;
		}
		set
		{
			if ((this._code != value))
			{
				this.OncodeChanging(value);
				this.SendPropertyChanging();
				this._code = value;
				this.SendPropertyChanged("code");
				this.OncodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_User", Storage="_Users", ThisKey="countryID", OtherKey="countryID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Developer")]
public partial class Developer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _developerID;
	
	private string _name;
	
	private string _website;
	
	private string _phone;
	
	private string _supportEmail;
	
	private EntitySet<App> _Apps;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndeveloperIDChanging(int value);
    partial void OndeveloperIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnsupportEmailChanging(string value);
    partial void OnsupportEmailChanged();
    #endregion
	
	public Developer()
	{
		this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_developerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int developerID
	{
		get
		{
			return this._developerID;
		}
		set
		{
			if ((this._developerID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OndeveloperIDChanging(value);
				this.SendPropertyChanging();
				this._developerID = value;
				this.SendPropertyChanged("developerID");
				this.OndeveloperIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(50)")]
	public string website
	{
		get
		{
			return this._website;
		}
		set
		{
			if ((this._website != value))
			{
				this.OnwebsiteChanging(value);
				this.SendPropertyChanging();
				this._website = value;
				this.SendPropertyChanged("website");
				this.OnwebsiteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20)")]
	public string phone
	{
		get
		{
			return this._phone;
		}
		set
		{
			if ((this._phone != value))
			{
				this.OnphoneChanging(value);
				this.SendPropertyChanging();
				this._phone = value;
				this.SendPropertyChanged("phone");
				this.OnphoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportEmail", DbType="VarChar(50)")]
	public string supportEmail
	{
		get
		{
			return this._supportEmail;
		}
		set
		{
			if ((this._supportEmail != value))
			{
				this.OnsupportEmailChanging(value);
				this.SendPropertyChanging();
				this._supportEmail = value;
				this.SendPropertyChanged("supportEmail");
				this.OnsupportEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Developer_App", Storage="_Apps", ThisKey="developerID", OtherKey="developerID")]
	public EntitySet<App> Apps
	{
		get
		{
			return this._Apps;
		}
		set
		{
			this._Apps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Developer", Storage="_User", ThisKey="developerID", OtherKey="userID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Developer = null;
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Developer = this;
					this._developerID = value.userID;
				}
				else
				{
					this._developerID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Developer = this;
	}
	
	private void detach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Developer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Recommendation")]
public partial class Recommendation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private int _appID;
	
	private float _expectedRate;
	
	private EntityRef<App> _App;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnappIDChanging(int value);
    partial void OnappIDChanged();
    partial void OnexpectedRateChanging(float value);
    partial void OnexpectedRateChanged();
    #endregion
	
	public Recommendation()
	{
		this._App = default(EntityRef<App>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int appID
	{
		get
		{
			return this._appID;
		}
		set
		{
			if ((this._appID != value))
			{
				if (this._App.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnappIDChanging(value);
				this.SendPropertyChanging();
				this._appID = value;
				this.SendPropertyChanged("appID");
				this.OnappIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expectedRate", DbType="Real NOT NULL")]
	public float expectedRate
	{
		get
		{
			return this._expectedRate;
		}
		set
		{
			if ((this._expectedRate != value))
			{
				this.OnexpectedRateChanging(value);
				this.SendPropertyChanging();
				this._expectedRate = value;
				this.SendPropertyChanged("expectedRate");
				this.OnexpectedRateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Recommendation", Storage="_App", ThisKey="appID", OtherKey="appID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public App App
	{
		get
		{
			return this._App.Entity;
		}
		set
		{
			App previousValue = this._App.Entity;
			if (((previousValue != value) 
						|| (this._App.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._App.Entity = null;
					previousValue.Recommendations.Remove(this);
				}
				this._App.Entity = value;
				if ((value != null))
				{
					value.Recommendations.Add(this);
					this._appID = value.appID;
				}
				else
				{
					this._appID = default(int);
				}
				this.SendPropertyChanged("App");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recommendation", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Recommendations.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Recommendations.Add(this);
					this._userID = value.userID;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Screenshot")]
public partial class Screenshot : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _screenshotID;
	
	private int _appID;
	
	private string _extension;
	
	private EntityRef<App> _App;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnscreenshotIDChanging(int value);
    partial void OnscreenshotIDChanged();
    partial void OnappIDChanging(int value);
    partial void OnappIDChanged();
    partial void OnextensionChanging(string value);
    partial void OnextensionChanged();
    #endregion
	
	public Screenshot()
	{
		this._App = default(EntityRef<App>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screenshotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int screenshotID
	{
		get
		{
			return this._screenshotID;
		}
		set
		{
			if ((this._screenshotID != value))
			{
				this.OnscreenshotIDChanging(value);
				this.SendPropertyChanging();
				this._screenshotID = value;
				this.SendPropertyChanged("screenshotID");
				this.OnscreenshotIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appID", DbType="Int NOT NULL")]
	public int appID
	{
		get
		{
			return this._appID;
		}
		set
		{
			if ((this._appID != value))
			{
				if (this._App.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnappIDChanging(value);
				this.SendPropertyChanging();
				this._appID = value;
				this.SendPropertyChanged("appID");
				this.OnappIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extension", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
	public string extension
	{
		get
		{
			return this._extension;
		}
		set
		{
			if ((this._extension != value))
			{
				this.OnextensionChanging(value);
				this.SendPropertyChanging();
				this._extension = value;
				this.SendPropertyChanged("extension");
				this.OnextensionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Screenshot", Storage="_App", ThisKey="appID", OtherKey="appID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public App App
	{
		get
		{
			return this._App.Entity;
		}
		set
		{
			App previousValue = this._App.Entity;
			if (((previousValue != value) 
						|| (this._App.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._App.Entity = null;
					previousValue.Screenshots.Remove(this);
				}
				this._App.Entity = value;
				if ((value != null))
				{
					value.Screenshots.Add(this);
					this._appID = value.appID;
				}
				else
				{
					this._appID = default(int);
				}
				this.SendPropertyChanged("App");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private string _firstName;
	
	private string _lastName;
	
	private string _gender;
	
	private int _countryID;
	
	private string _email;
	
	private string _password;
	
	private bool _admin;
	
	private EntityRef<Developer> _Developer;
	
	private EntitySet<Recommendation> _Recommendations;
	
	private EntitySet<UserApp> _UserApps;
	
	private EntitySet<UserFeature> _UserFeatures;
	
	private EntityRef<Country> _Country;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnadminChanging(bool value);
    partial void OnadminChanged();
    #endregion
	
	public User()
	{
		this._Developer = default(EntityRef<Developer>);
		this._Recommendations = new EntitySet<Recommendation>(new Action<Recommendation>(this.attach_Recommendations), new Action<Recommendation>(this.detach_Recommendations));
		this._UserApps = new EntitySet<UserApp>(new Action<UserApp>(this.attach_UserApps), new Action<UserApp>(this.detach_UserApps));
		this._UserFeatures = new EntitySet<UserFeature>(new Action<UserFeature>(this.attach_UserFeatures), new Action<UserFeature>(this.detach_UserFeatures));
		this._Country = default(EntityRef<Country>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string firstName
	{
		get
		{
			return this._firstName;
		}
		set
		{
			if ((this._firstName != value))
			{
				this.OnfirstNameChanging(value);
				this.SendPropertyChanging();
				this._firstName = value;
				this.SendPropertyChanged("firstName");
				this.OnfirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string lastName
	{
		get
		{
			return this._lastName;
		}
		set
		{
			if ((this._lastName != value))
			{
				this.OnlastNameChanging(value);
				this.SendPropertyChanging();
				this._lastName = value;
				this.SendPropertyChanged("lastName");
				this.OnlastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", DbType="Int NOT NULL")]
	public int countryID
	{
		get
		{
			return this._countryID;
		}
		set
		{
			if ((this._countryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncountryIDChanging(value);
				this.SendPropertyChanging();
				this._countryID = value;
				this.SendPropertyChanged("countryID");
				this.OncountryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit NOT NULL")]
	public bool admin
	{
		get
		{
			return this._admin;
		}
		set
		{
			if ((this._admin != value))
			{
				this.OnadminChanging(value);
				this.SendPropertyChanging();
				this._admin = value;
				this.SendPropertyChanged("admin");
				this.OnadminChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Developer", Storage="_Developer", ThisKey="userID", OtherKey="developerID", IsUnique=true, IsForeignKey=false)]
	public Developer Developer
	{
		get
		{
			return this._Developer.Entity;
		}
		set
		{
			Developer previousValue = this._Developer.Entity;
			if (((previousValue != value) 
						|| (this._Developer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Developer.Entity = null;
					previousValue.User = null;
				}
				this._Developer.Entity = value;
				if ((value != null))
				{
					value.User = this;
				}
				this.SendPropertyChanged("Developer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recommendation", Storage="_Recommendations", ThisKey="userID", OtherKey="userID")]
	public EntitySet<Recommendation> Recommendations
	{
		get
		{
			return this._Recommendations;
		}
		set
		{
			this._Recommendations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserApp", Storage="_UserApps", ThisKey="userID", OtherKey="userID")]
	public EntitySet<UserApp> UserApps
	{
		get
		{
			return this._UserApps;
		}
		set
		{
			this._UserApps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFeature", Storage="_UserFeatures", ThisKey="userID", OtherKey="userID")]
	public EntitySet<UserFeature> UserFeatures
	{
		get
		{
			return this._UserFeatures;
		}
		set
		{
			this._UserFeatures.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_User", Storage="_Country", ThisKey="countryID", OtherKey="countryID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._countryID = value.countryID;
				}
				else
				{
					this._countryID = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Recommendations(Recommendation entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Recommendations(Recommendation entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserApps(UserApp entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserApps(UserApp entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserFeatures(UserFeature entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserFeatures(UserFeature entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.UserApp")]
public partial class UserApp : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private int _appID;
	
	private float _rate;
	
	private bool _favorite;
	
	private EntityRef<App> _App;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnappIDChanging(int value);
    partial void OnappIDChanged();
    partial void OnrateChanging(float value);
    partial void OnrateChanged();
    partial void OnfavoriteChanging(bool value);
    partial void OnfavoriteChanged();
    #endregion
	
	public UserApp()
	{
		this._App = default(EntityRef<App>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int appID
	{
		get
		{
			return this._appID;
		}
		set
		{
			if ((this._appID != value))
			{
				if (this._App.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnappIDChanging(value);
				this.SendPropertyChanging();
				this._appID = value;
				this.SendPropertyChanged("appID");
				this.OnappIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Real NOT NULL")]
	public float rate
	{
		get
		{
			return this._rate;
		}
		set
		{
			if ((this._rate != value))
			{
				this.OnrateChanging(value);
				this.SendPropertyChanging();
				this._rate = value;
				this.SendPropertyChanged("rate");
				this.OnrateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_favorite", DbType="Bit NOT NULL")]
	public bool favorite
	{
		get
		{
			return this._favorite;
		}
		set
		{
			if ((this._favorite != value))
			{
				this.OnfavoriteChanging(value);
				this.SendPropertyChanging();
				this._favorite = value;
				this.SendPropertyChanged("favorite");
				this.OnfavoriteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_UserApp", Storage="_App", ThisKey="appID", OtherKey="appID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public App App
	{
		get
		{
			return this._App.Entity;
		}
		set
		{
			App previousValue = this._App.Entity;
			if (((previousValue != value) 
						|| (this._App.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._App.Entity = null;
					previousValue.UserApps.Remove(this);
				}
				this._App.Entity = value;
				if ((value != null))
				{
					value.UserApps.Add(this);
					this._appID = value.appID;
				}
				else
				{
					this._appID = default(int);
				}
				this.SendPropertyChanged("App");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserApp", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserApps.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserApps.Add(this);
					this._userID = value.userID;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.UserFeature")]
public partial class UserFeature : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private int _featureID;
	
	private float _featureValue;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnfeatureIDChanging(int value);
    partial void OnfeatureIDChanged();
    partial void OnfeatureValueChanging(float value);
    partial void OnfeatureValueChanged();
    #endregion
	
	public UserFeature()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int featureID
	{
		get
		{
			return this._featureID;
		}
		set
		{
			if ((this._featureID != value))
			{
				this.OnfeatureIDChanging(value);
				this.SendPropertyChanging();
				this._featureID = value;
				this.SendPropertyChanged("featureID");
				this.OnfeatureIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featureValue", DbType="Real NOT NULL")]
	public float featureValue
	{
		get
		{
			return this._featureValue;
		}
		set
		{
			if ((this._featureValue != value))
			{
				this.OnfeatureValueChanging(value);
				this.SendPropertyChanging();
				this._featureValue = value;
				this.SendPropertyChanged("featureValue");
				this.OnfeatureValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFeature", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserFeatures.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserFeatures.Add(this);
					this._userID = value.userID;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="C363519_SmartMarket.Version")]
public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _versionID;
	
	private int _appID;
	
	private string _versionNumber;
	
	private float _size;
	
	private string _minAndroidVersion;
	
	private System.DateTime _date;
	
	private EntitySet<App> _Apps;
	
	private EntityRef<App> _App;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionIDChanging(int value);
    partial void OnversionIDChanged();
    partial void OnappIDChanging(int value);
    partial void OnappIDChanged();
    partial void OnversionNumberChanging(string value);
    partial void OnversionNumberChanged();
    partial void OnsizeChanging(float value);
    partial void OnsizeChanged();
    partial void OnminAndroidVersionChanging(string value);
    partial void OnminAndroidVersionChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
	
	public Version()
	{
		this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
		this._App = default(EntityRef<App>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_versionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int versionID
	{
		get
		{
			return this._versionID;
		}
		set
		{
			if ((this._versionID != value))
			{
				this.OnversionIDChanging(value);
				this.SendPropertyChanging();
				this._versionID = value;
				this.SendPropertyChanged("versionID");
				this.OnversionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appID", DbType="Int NOT NULL")]
	public int appID
	{
		get
		{
			return this._appID;
		}
		set
		{
			if ((this._appID != value))
			{
				if (this._App.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnappIDChanging(value);
				this.SendPropertyChanging();
				this._appID = value;
				this.SendPropertyChanged("appID");
				this.OnappIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_versionNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string versionNumber
	{
		get
		{
			return this._versionNumber;
		}
		set
		{
			if ((this._versionNumber != value))
			{
				this.OnversionNumberChanging(value);
				this.SendPropertyChanging();
				this._versionNumber = value;
				this.SendPropertyChanged("versionNumber");
				this.OnversionNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Real NOT NULL")]
	public float size
	{
		get
		{
			return this._size;
		}
		set
		{
			if ((this._size != value))
			{
				this.OnsizeChanging(value);
				this.SendPropertyChanging();
				this._size = value;
				this.SendPropertyChanged("size");
				this.OnsizeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minAndroidVersion", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
	public string minAndroidVersion
	{
		get
		{
			return this._minAndroidVersion;
		}
		set
		{
			if ((this._minAndroidVersion != value))
			{
				this.OnminAndroidVersionChanging(value);
				this.SendPropertyChanging();
				this._minAndroidVersion = value;
				this.SendPropertyChanged("minAndroidVersion");
				this.OnminAndroidVersionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
	public System.DateTime date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_App", Storage="_Apps", ThisKey="versionID", OtherKey="activatedVersionID")]
	public EntitySet<App> Apps
	{
		get
		{
			return this._Apps;
		}
		set
		{
			this._Apps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="App_Version", Storage="_App", ThisKey="appID", OtherKey="appID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public App App
	{
		get
		{
			return this._App.Entity;
		}
		set
		{
			App previousValue = this._App.Entity;
			if (((previousValue != value) 
						|| (this._App.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._App.Entity = null;
					previousValue.Versions.Remove(this);
				}
				this._App.Entity = value;
				if ((value != null))
				{
					value.Versions.Add(this);
					this._appID = value.appID;
				}
				else
				{
					this._appID = default(int);
				}
				this.SendPropertyChanged("App");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Version = this;
	}
	
	private void detach_Apps(App entity)
	{
		this.SendPropertyChanging();
		entity.Version = null;
	}
}
#pragma warning restore 1591
